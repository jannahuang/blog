<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>https://github.com/jannahuang/blog</id><title>RSS feed of jannahuang's blog</title><updated>2022-06-27T13:55:38.168351+00:00</updated><author><name>jannahuang</name><email>jannajanna@126.com</email></author><link href="https://github.com/jannahuang/blog"/><link href="https://raw.githubusercontent.com/jannahuang/blog/main/feed.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator><entry><id>https://github.com/jannahuang/blog/issues/10</id><title>实现 JS Formatter</title><updated>2022-06-27T13:55:38.323764+00:00</updated><link href="https://github.com/jannahuang/blog/issues/10" rel="alternate"/><published>2022-06-26T16:07:47+00:00</published></entry><entry><id>https://github.com/jannahuang/blog/issues/9</id><title>前端概念台账</title><updated>2022-06-27T13:55:38.390493+00:00</updated><link href="https://github.com/jannahuang/blog/issues/9" rel="alternate"/><published>2022-06-13T14:37:44+00:00</published></entry><entry><id>https://github.com/jannahuang/blog/issues/1</id><title>实现 JSON.parse()</title><updated>2022-06-27T13:55:38.472932+00:00</updated><content type="html"><![CDATA[<h1>JSON 是什么</h1>
<p>综合 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/JSON">MDN</a> 和<a href="https://zh.wikipedia.org/wiki/JSON">维基百科</a>上的定义，JSON 是一种轻量级数据交换格式，其内容由属性和值所组成，易于阅读和处理。
JSON 可以表示<strong>数字、布尔值、字符串、null、数组</strong>（有序序列），以及由这些值组成的<strong>对象</strong>（字符串与值的映射）。JSON 不支持复杂的数据类型（函数、正则表达式、日期等）。
一个有效的JSON文档的根节点<strong>必须是一个对象或一个数组</strong>。</p>
<h1>JSON.parse() 是什么</h1>
<p>JavaScript 语言自带 JSON 对象，包含两个方法：
JSON.parse() 用于解析 JSON 字符串并返回对应对象/值的方法；
JSON.stringify() 用于将对象/值转换为 JSON 字符串的方法。</p>
<h1>JSON.parse() 用法举例</h1>
<ol>
<li><strong>对象</strong> JSON 字符串：</li>
</ol>
<pre><code>{
    &quot;a1&quot;: [1, &quot;2&quot;, -3, 4.5, {
        &quot;k0&quot;: &quot;v0&quot;
    }],
    &quot;obj&quot;: {
        &quot;k1&quot;: &quot;v1&quot;,
        &quot;k2&quot;: [&quot;10&quot;, -20]
    }
}
</code></pre>
<p>JSON.parse() 后结果：
<img src="https://raw.githubusercontent.com/jannahuang/blog/main/pictures/json.parse1.png" alt="对象 JSON" /></p>
<ol start="2">
<li><strong>数组</strong> JSON 字符串：</li>
</ol>
<pre><code>[
    true, null, {
        &quot;obj&quot;: {
            &quot;k1&quot;: &quot;v1&quot;,
            &quot;k2&quot;: [10, &quot;-20&quot;]
        }
    }, [1, &quot;2&quot;, {
        &quot;a1&quot;: {
            &quot;k3&quot;: &quot;v3&quot;
        }
    }]
]
</code></pre>
<p>JSON.parse() 后结果：
<img src="https://raw.githubusercontent.com/jannahuang/blog/main/pictures/json.parse2.png" alt="数组 JSON" /></p>
<h1>步骤拆解</h1>
<p>从上述举例可见，实现一个 json-parser，首先需要逐字读取字符串，去除空格和换行，提取并保存有效的词（token）；然后将词（token）按顺序和词法规则生成新的对象或数组。
拆解思维导图如下：
<img src="https://raw.githubusercontent.com/jannahuang/blog/main/pictures/json-parser%E6%AD%A5%E9%AA%A4%E6%8B%86%E8%A7%A3.png" alt="json-parser 步骤拆解" />
接下来按步骤实现代码。</p>
<h1>代码实现</h1>
<h2>提取 token</h2>
<h3>实现 jsonTokens()</h3>
<pre><code class="language-javascript">const jsonTokens = (s) =&gt; {
    let r = []
    for (let i = 0; i &lt; s.length; i++) {
        let e = s[i]
        if (isSymbol(e)) {
            r.push(e)
        } else if (e === &#x27;&quot;&#x27; || e === &quot;&#x27;&quot;) {
            // 跳过前面的引号
            let t = stringEnd(s, i + 1)
            r.push(t[0])
            // 跳过后面的引号
            i += t[1] + 1
        } else if (isNumber(e)) {
            let t = numberEnd(s, i)
            r.push(t[0])
            i += t[1] - 1
        } else if (isLetter(e)) {
            // log(&#x27;in&#x27;)
            // 跳过前面的引号
            let t = stringEnd(s, i)
            // log(&#x27;t in&#x27;, t)
            r.push(t[0])
            // 跳过后面的引号
            i += t[1]
        } else if (e === &#x27; &#x27;) {
            // 空格跳过，不处理
        }
    }
    return r
}
</code></pre>
<h2>生成值</h2>
<h3>实现 parseObject()</h3>
<pre><code class="language-javascript">// 全局变量，记录位移
let globalOffset_obj = 0
let globalOffset_arr = 0

const parseObject = (tokenList) =&gt; {
    let object = {}
    for (let i = 0; i &lt; tokenList.length; i++) {
        let t0 = tokenList[i]
        let t1 = tokenList[i + 1]
        let t2 = tokenList[i + 2]
        if (t0 === &#x27;}&#x27;) {
            // i 初始为 0，obj 还有键值中间的冒号，故 +2
            globalOffset_obj = i + 2
            return object
        } else if (t1 === &#x27;:&#x27; &amp;&amp; t2 === &#x27;{&#x27;) {
            // 跳过 t0, t1, t2，故 +3
            let s = tokenList.slice(i + 2)
            r = parseObject(s)
            object[t0] = r
            i += globalOffset_obj
        } else if (t1 === &#x27;:&#x27; &amp;&amp; t2 === &#x27;[&#x27;) {
            // 跳过 t0, t1, t2，故 +3
            let s = tokenList.slice(i + 3)
            r = parseArray(s)
            object[t0] = r
            i += globalOffset_arr + 1
        } else if (t1 === &#x27;:&#x27; &amp;&amp; t2 !== &#x27;{&#x27; &amp;&amp; t2 !== &#x27;[&#x27;) {
            object[t0] = t2
        }
    }
}

</code></pre>
<h3>实现 parseArray()</h3>
<pre><code class="language-javascript">const parseArray = (tokenList) =&gt; {
   let array = []
   for (let i = 0; i &lt; tokenList.length; i++) {
       let t = tokenList[i]
       if (t === &#x27;]&#x27;) {
           // i 初始为 0，因此 +1
           globalOffset_arr = i + 1
           return array
       } else if (t === &#x27;{&#x27;) {
           // 跳过 t，故 +1
           let s = tokenList.slice(i + 1)
           let r = parseObject(s)
           array.push(r)
           i += globalOffset_obj - 1
       } else if (t === &#x27;[&#x27;) {
           // 跳过 t，故 +1
           let s = tokenList.slice(i + 1)
           let r = parseArray(s)
           array.push(r)
           i += globalOffset_arr
       } else if (t === &#x27;,&#x27;) {
           // 逗号跳过，不处理
       } else {
           array.push(t)
       }
   }
}

</code></pre>
<h3>辅助函数</h3>
<pre><code class="language-javascript">
const isSymbol = (t) =&gt; {
   let symbol = &#x27;[]{}:,&#x27;
   return symbol.includes(t)
}

const isNumber = (t) =&gt; {
   let number = &#x27;-.0123456789&#x27;
   return number.includes(t)
}

const isLetter = (t) =&gt; {
   let letter = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;
   return letter.includes(t)
}

const stringEnd = (s, i) =&gt; {
   s = s.slice(i)
   let str = &#x27;&#x27;
   // 处理转义字符
   let map = {
       &#x27;b&#x27;: &#x27;\b&#x27;,
       &#x27;f&#x27;: &#x27;\f&#x27;,
       &#x27;n&#x27;: &#x27;\n&#x27;,
       &#x27;r&#x27;: &#x27;\r&#x27;,
       &#x27;v&#x27;: &#x27;\v&#x27;,
       &#x27;t&#x27;: &#x27;\t&#x27;,
       &quot;&#x27;&quot;: &quot;&#x27;&quot;,
       &#x27;&quot;&#x27;: &#x27;&quot;&#x27;,
       &#x27;\\&#x27;: &#x27;\\&#x27;,
   }
   // 处理常见关键词
   let keyword = {
       &#x27;true&#x27;: true,
       &#x27;false&#x27;: false,
       &#x27;null&#x27;: null,
   }
   for (let i = 0; i &lt; s.length; i++) {
       let t = s[i]
       if (isLetter(t) || isNumber(t) || s[i] === &#x27;/&#x27;) {
           str += t
       } else if (t === &#x27;\\&#x27;) {
           // 处理转义字符，先获取反斜杠后的字母 s[i + 1]，再从 map 里取对应值
           let o = map[s[i + 1]]
           if (o) {
               str += o
               i += 1
           }
       } else if (t === &#x27;&quot;&#x27; || t === &quot;&#x27;&quot;) {
           // 以数组格式返回 str 和 i，便于后续计算
           return [str, i]
       } else if (t === &#x27;\n&#x27;) {
           str += t
       } else {
           if (Object.keys(keyword).includes(str)) {
               return [keyword[str], i]
           }
       }
   }
   return [str, str.length]
}

const numberEnd = (s, i) =&gt; {
   s = s.slice(i)
   let num = &#x27;&#x27;
   for (let i = 0; i &lt; s.length; i++) {
       let t = s[i]
       if (isNumber(t)) {
           num += t
       } else {
           // 以数组格式返回 num 和 i，便于后续计算
           return [Number(num), i]
       }
   }
   return [Number(num), i]
}

</code></pre>
<h3>主函数</h3>
<pre><code class="language-javascript">
const jsonParser = (s) =&gt; {
   let tokenList = jsonTokens(s)
   let result
   if (tokenList[0] === &#x27;{&#x27;) {
       result = parseObject(tokenList.slice(1))
   } else if (tokenList[0] === &#x27;[&#x27;) {
       result = parseArray(tokenList.slice(1))
   }
   return result
}
</code></pre>
]]></content><link href="https://github.com/jannahuang/blog/issues/1" rel="alternate"/><category term="JavaScript"/><published>2022-06-11T03:58:21+00:00</published></entry></feed>